name: Docker Image CI

on:
  pull_request:
    branches: 
      - master
      - staging
      - development
  push:
    branches: 
      - master
      - staging
      - development

jobs:

  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Pulling old images, if any
        run: docker-compose pull --ignore-pull-failures
      - name: Setting APP_ENV to dev
        run: | 
          echo ::set-env name=APP_ENV::dev
          echo "set APP_ENV to $APP_ENV"
      - name: Setting APP_ENV to prod
        if: contains( github.ref, 'master' ) || contains( github.base_ref, 'master' )
        run: |
            echo ::set-env name=APP_ENV::prod
            echo "set APP_ENV to $APP_ENV"
      - name: Setting APP_ENV to stag
        if: contains( github.ref, 'staging' ) || contains( github.base_ref, 'staging' )
        run: |
            echo ::set-env name=APP_ENV::stag
            echo "set APP_ENV to $APP_ENV" 
      - name: Print definitive APP_ENV
        run: echo "APP_ENV is now $APP_ENV"
      - name: Build the Docker image
        run: docker-compose build --pull --build-arg APP_ENV=$APP_ENV
      - name: Run the docker image
        run: docker-compose up -d
      - name: Taking some sleep
        run: sleep 100
      - name: Check if all containers are running
        run: docker ps
      - name: Dumping the logs
        run: docker-compose logs
      - name: Security Checks
        run: docker-compose exec -T php composer req sensiolabs/security-checker
      - name: Chores
        run: docker-compose down
      - name: Login to DockerHub Registry
        id: dockerhub-login
        run: |
            if [ "${{ secrets.DOCKERHUB_PASSWORD }}" != "" ] && [ "${{ secrets.DOCKERHUB_USERNAME }}" != "" ]; then
              echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
              echo "##[set-output name=success;]true"
            else
              echo "##[set-output name=success;]false"
            fi
      - if: steps.dockerhub-login.outputs.success == 'true'
        name: Push to docker hub
        run: docker-compose push
      - name: Create kube config
        id: kubeconfig
        if: contains( github.ref, 'master' ) || contains( github.ref, 'staging' ) || contains( github.ref, 'development' )
        run: |
            if [ "${{ secrets.KUBECONFIG }}" != "" ]; then
              printf "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
              echo "##[set-output name=success]true"
            else
              echo "##[set-output name=success]false"
            fi 
      - name: Set correct helm version
        if: (contains( github.ref, 'master' ) || contains( github.ref, 'staging' ) || contains( github.ref, 'development' )) && steps.kubeconfig.outputs.success == 'true'
        run: helm init --upgrade --kubeconfig="kubeconfig.yaml"    
      - name: Deploy through helm
        if: (contains( github.ref, 'master' ) || contains( github.ref, 'staging' ) || contains( github.ref, 'development' )) && steps.kubeconfig.outputs.success == 'true'
        run: helm upgrade pc-$APP_ENV ./api/helm  --kubeconfig="kubeconfig.yaml" --namespace=$APP_ENV  --set settings.env=$APP_ENV,settings.debug=1,settings.loadbalancerEnabled=true
